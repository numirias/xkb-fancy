default
xkb_symbols "pax" {

    key.type[Group1] = "FIVE_LEVEL_PAX";

    key <AE01> { [ 1,             exclam,     onesuperior,   exclamdown, XF86AudioMute ] };
    key <AE02> { [ 2,             quotedbl,   twosuperior,   oneeighth ] };
    key <AE03> { [ 3,             dead_diaeresis,    threesuperior, sterling ] };
    key <AE04> { [ 4,             dollar,     onequarter,    currency ] };
    key <AE05> { [ 5,             percent,    onehalf,       threeeighths ] };
    key <AE06> { [ 6,             ampersand,  notsign,       fiveeighths ] };
    key <AE07> { [ 7,             slash,      braceleft,     seveneighths ] };
    key <AE08> { [ 8,             parenleft,  bracketleft,   trademark, XF86RFKill ] };
    key <AE09> { [ 9,             parenright, bracketright,  plusminus ] };
    key <AE10> { [ 0,             equal,      BackSpace,     BackSpace ] };
    key <AE11> { [ ssharp,        question,   backslash,     questiondown, U1E9E ] };
    key <AE12> { [ acute,         grave,      cedilla,       cedilla ] };

    key.type[Group1] = "FOUR_LEVEL";

    key <AE01> { [ 1,             exclam,     onesuperior,   exclamdown, XF86AudioMute ] };
    key <AE02> { [ 2,             quotedbl,   twosuperior,   oneeighth ] };
    key <AE03> { [ 3,             dead_diaeresis,    threesuperior, sterling ] };
    key <AE04> { [ 4,             dollar,     onequarter,    currency ] };
    key <AE05> { [ 5,             percent,    onehalf,       threeeighths ] };
    key <AE06> { [ 6,             ampersand,  notsign,       fiveeighths ] };
    key <AE07> { [ 7,             slash,      braceleft,     seveneighths ] };
    key <AE08> { [ 8,             parenleft,  bracketleft,   trademark, XF86RFKill ] };
    key <AE09> { [ 9,             parenright, bracketright,  plusminus ] };
    key <AE10> { [ 0,             equal,      BackSpace,     BackSpace ] };
    key <AE11> { [ ssharp,        question,   backslash,     questiondown, U1E9E ] };
    key <AE12> { [ acute,         grave,      cedilla,       cedilla ] };



    key <BKSP> {         [       BackSpace,       BackSpace ] };
    key  <TAB> {         [             Tab,    Tab ] };
    key <AD01> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               q,               Q,              at,     Greek_OMEGA ]
    };
    key <AD02> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               w,               W,        quotedbl,         Lstroke ]
    };
    key <AD03> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               e,               E,      apostrophe,        EuroSign ]
    };
    key <AD04> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               r,               R,       backslash,      registered ]
    };
    key <AD05> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               t,               T,         percent,          Tslash ]
    };
    key <AD06> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               z,               Z,       ampersand,             yen ]
    };
    key <AD07> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               u,               U,      asciitilde,         uparrow ]
    };
    key <AD08> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               i,               I,          equal,          period ]
    };
    key <AD09> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               o,               O,           slash,               0 ]
    };
    key <AD10> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               p,               P,        asterisk,           THORN ]
    };
    key <AD11> { //ü
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [      0,      0,       diaeresis,       diaeresis ]
    };
    key <AD12> {
        type= "FOUR_LEVEL",
        symbols[Group1]= [            plus,        asterisk,      asciitilde,          macron ]
    };
    key <RTRN> {         [          Return ] };
    key <LCTL> {         [       Control_L ] };
    key <AC01> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               a,               A,       parenleft,               1 ]
    };
    key <AC02> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               s,               S,      parenright,               2 ]
    };
    key <AC03> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               d,               D,       braceleft,               3 ]
    };
    key <AC04> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               f,               F,      braceright,               4 ]
    };
    key <AC05> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               g,               G,          dollar,               5 ]
    };
    key <AC06> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               h,               H,      minus,               6 ]
    };
    key <AC07> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               j,               J,     bracketleft,               7 ]
    };
    key <AC08> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               k,               K,    bracketright,               8 ]
    };
    key <AC09> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               l,               L,        numbersign,               9 ]
    };
    key <AC10> { //ö
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [      0,      0,               0,     doubleacute ]
    };
    key <AC11> { //ä
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [      Return,      Return,     asciicircum,     asciicircum ]
    };
    key <TLDE> {
        type= "FOUR_LEVEL",
        symbols[Group1]= [     asciicircum,          degree,         notsign,         notsign ]
    };
    key <LFSH> {         [         Shift_L ] };
    key <BKSL> {
        type= "FOUR_LEVEL",
        symbols[Group1]= [      Return,      Return,           grave,           grave ]
    };
    key <AB01> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               y,               Y,            less,           U203A ]
    };
    key <AB02> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               x,               X,         greater,           U2039 ]
    };
    key <AB03> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               c,               C,       semicolon,       copyright ]
    };
    key <AB04> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               v,               V,           colon, singlelowquotemark ]
    };
    key <AB05> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               b,               B,             bar, leftsinglequotemark ]
    };
    key <AB06> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               n,               N,            plus,            plus ]
    };
    key <AB07> {
        type= "FOUR_LEVEL_SEMIALPHABETIC",
        symbols[Group1]= [               m,               M,           minus,           minus ]
    };
    key <AB08> {
        type= "FOUR_LEVEL",
        symbols[Group1]= [           comma,       semicolon,           equal,           comma ]
    };
    key <AB09> {
        type= "FOUR_LEVEL",
        symbols[Group1]= [          period,           colon,          period,          period ]
    };
    key <AB10> {
        type= "FOUR_LEVEL",
        symbols[Group1]= [           minus,      underscore,          endash,          emdash ]
    };
    key <SPCE> {
        type= "FOUR_LEVEL",
        symbols[Group1]= [           space,           space,      underscore,      underscore ]
    };
    key <CAPS> {         [          Escape ] };
    key <LSGT> {
        type= "FOUR_LEVEL",
        symbols[Group1]= [            less,         greater,             bar,       brokenbar ]
    };

    key  <ESC> {         [          asciicircum, degree ] };
    key <RTSH> {         [         Delete ] };
    key <HKTG>   {      [ BackSpace, BackSpace ]       };
};
